import("youbot_supervisor")

#Create the components we need
loadComponent("ExtendedKalmanFilterComponentRobot","ExtendedKalmanFilterComponentRobot")
loadComponent("Timer","OCL::TimerComponent")
loadComponent("Controller","youbot::Controller")
loadComponent("rtt_tf","rtt_tf::RTT_TF")
loadComponent("Reporter","OCL::FileReporting")

#Set the components activity
setActivity("Controller",0.01,HighestPriority,ORO_SCHED_RT)
setActivity("ExtendedKalmanFilterComponentRobot",0.0,HighestPriority,ORO_SCHED_RT)
setActivity("Timer",0.01,HighestPriority,ORO_SCHED_RT)
setActivity("Reporter",0.001,LowestPriority,ORO_SCHED_OTHER)

# load service
loadService("ExtendedKalmanFilterComponentRobot","marshalling")
loadService("Reporter","marshalling")
loadService("Controller","rosparam")

# Connect peers
#connectPeers("Controller","Youbot")
connectPeers("ExtendedKalmanFilterComponentRobot","Timer")
connectPeers("ExtendedKalmanFilterComponentRobot","Controller")
connectPeers("Reporter","ExtendedKalmanFilterComponentRobot")

# Load properties
# Set Youbot Properties
Controller.rosparam.refreshProperty("goal_tolerance",false,true)
Controller.rosparam.refreshProperty("control_velocity",false,true)
ExtendedKalmanFilterComponentRobot.marshalling.loadProperties("/home/u0063509/src/svn/stacks/euRobotics_orocos_ws/extendedKalmanFilterComponent/cpf/ekfRobot.cpf")

# Create connections
var ConnPolicy cp
#connect("Controller.ctrl","Youbot.cmd_twist",cp)
connect("Timer.timeout","ExtendedKalmanFilterComponentRobot.TimerId",cp)
cp.transport = 3
cp.name_id = "cmd_vel"
stream("Controller.ctrl",cp)
cp.name_id = "CalculateDistanceToWall/Measurement"
stream("ExtendedKalmanFilterComponentRobot.Measurement",cp)

# Configuring components
Controller.configure()
ExtendedKalmanFilterComponentRobot.configure()
Timer.configure()
rtt_tf.configure()

# Starting components
rtt_tf.start()
ExtendedKalmanFilterComponentRobot.start()
Controller.start()

# What ports to report
#Reporter.reportData("ExtendedKalmanFilterComponentRobot","Level")
#Reporter.reportPort("ExtendedKalmanFilterComponentRobot","EstimatedState")
#Reporter.reportPort("ExtendedKalmanFilterComponentRobot","CovarianceState")
#Reporter.start()
