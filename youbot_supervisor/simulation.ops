import("youbot_supervisor")

#Create the components we need
loadComponent("Supervisor","OCL::LuaComponent")
loadComponent("ExtendedKalmanFilterComponentRobot","ExtendedKalmanFilterComponentRobot")
loadComponent("Timer","OCL::TimerComponent")
loadComponent("Controller","youbot::Controller")
loadComponent("Simulator","youbot::Simulator")
loadComponent("Reporter","OCL::FileReporting")

#Set the components activity
setActivity("Supervisor",0.1,HighestPriority,ORO_SCHED_RT)
setActivity("Simulator",0.01,HighestPriority,ORO_SCHED_RT)
setActivity("Controller",0.01,HighestPriority,ORO_SCHED_RT)
setActivity("ExtendedKalmanFilterComponentRobot",0.0,HighestPriority,ORO_SCHED_RT)
setActivity("Timer",0.01,HighestPriority,ORO_SCHED_RT)
setActivity("Reporter",0.001,LowestPriority,ORO_SCHED_OTHER)

# load service
loadService("ExtendedKalmanFilterComponentRobot","marshalling")
loadService("Reporter","marshalling")
loadService("Controller","rosparam")
loadService("Simulator","rosparam")
loadService("Simulator","marshalling")

# Connect peers
connectPeers("Supervisor","Controller")
connectPeers("Supervisor","Simulator")
connectPeers("Supervisor","ExtendedKalmanFilterComponentRobot")
connectPeers("Controller","Simulator")
connectPeers("ExtendedKalmanFilterComponentRobot","Timer")
connectPeers("ExtendedKalmanFilterComponentRobot","Controller")
connectPeers("ExtendedKalmanFilterComponentRobot","Simulator")
connectPeers("Reporter","ExtendedKalmanFilterComponentRobot")
connectPeers("Reporter","Controller")
connectPeers("Reporter","Simulator")

# Load properties
Controller.rosparam.refreshProperty("goal_tolerance",false,true)
Controller.rosparam.refreshProperty("control_velocity",false,true)
#Simulator.rosparam.refreshProperty("Level",false,true)
#Simulator.rosparam.refreshProperty("MeasModelCovariance",false,true)
#Simulator.rosparam.refreshProperty("MeasModelMatrix",false,true)
#Simulator.rosparam.refreshProperty("MeasNoiseCovariance",false,true)
#Simulator.rosparam.refreshProperty("MeasNoiseMean",false,true)
#Simulator.rosparam.refreshProperty("Period",false,true)
#Simulator.rosparam.refreshProperty("PosStateDimension",false,true)
#Simulator.rosparam.refreshProperty("MeasDimension",false,true)
#Simulator.rosparam.refreshProperty("SysNoiseCovariance",false,true)
#Simulator.rosparam.refreshProperty("SysNoiseMean",false,true)
Simulator.marshalling.loadProperties("/home/u0063509/src/svn/stacks/euRobotics_orocos_ws/youbot_simulator/cpf/simulator.cpf")
ExtendedKalmanFilterComponentRobot.marshalling.loadProperties("/home/u0063509/src/svn/stacks/euRobotics_orocos_ws/extendedKalmanFilterComponent/cpf/ekfRobot.cpf")

# Create connections
var ConnPolicy cp
connect("Controller.ctrl","Simulator.ctrl",cp)
connect("Timer.timeout","ExtendedKalmanFilterComponentRobot.TimerId",cp)
connect("ExtendedKalmanFilterComponentRobot.EstimatedState","Controller.current_pose",cp)
connect("Simulator.measurement","ExtendedKalmanFilterComponentRobot.Measurement",cp)
cp.transport = 3
cp.name_id = "controller/ctrl"
stream("Controller.ctrl",cp)

# Configuring components
Controller.configure()
Timer.configure()
Simulator.configure()
ExtendedKalmanFilterComponentRobot.configure()

# Starting components
Simulator.start()
ExtendedKalmanFilterComponentRobot.start()
Controller.start()

# Start the supervisor and run the state machine
Supervisor.exec_file("/home/u0063509/src/svn/stacks/euRobotics_orocos_ws/youbot_supervisor/run.lua")

Supervisor.configure
Supervisor.start

# What ports to report
Reporter.reportData("ExtendedKalmanFilterComponentRobot","Level")
Reporter.reportPort("ExtendedKalmanFilterComponentRobot","EstimatedState")
Reporter.reportPort("ExtendedKalmanFilterComponentRobot","CovarianceState")
Reporter.start()
